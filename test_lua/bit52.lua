---
--- Created by slanska.
--- DateTime: 2017-12-25 10:37 AM
---

--[[Test bit 52 operations]]
require 'util'
local bit52 = require('Util').bit52

--[[
Python code to generate:
#python 3.5.2

import random

for x in range(10):
    a = random.randint(1 << 31, 1 << 52)
    b = random.randint(1 << 31, 1 << 52)
    i = random.randint(1, 1 << 12)
    s = random.randint(13, 40)
    mask1 = 0xFFFF00FFFFFFF
    mask2 = 0xFFFFF000FFFFF
    print("{", a, b, a & b, a | b, ~a, i, s, i << s, mask1, (a & mask1) | b, mask2, (a & mask2) | b, (i << s) >> s, "}")

]]

-- [1] a, [2] b, [3] a & b, [4] a | b, [5] ~a, [6] i, [7] s, [8] i << s, [9] mask1, [10] (a & mask1) | b, [11] mask2, [12] (a & mask2) | b, [13] (i << s) >> s
local sample_data = {
    { 2020389440426163, 2478532970225158, 13194143797250, 4485728266854071, -2020389440426164, 2473, 35, 84971632984064, 4503531176329215, 4485691491196599, 4503595333451775, 4485725806894775, 2473 },
    { 1296940560571637, 203869609573483, 168272543095905, 1332537627049215, -1296940560571638, 3611, 23, 30291263488, 4503531176329215, 1332518299696383, 4503595333451775, 1332535475371263, 3611 },
    { 1879284151710905, 4150095792882597, 1878173897736353, 4151206046857149, -1879284151710906, 2730, 19, 1431306240, 4503531176329215, 4151195309438909, 4503595333451775, 4151203895179197, 2730 },
    { 1732495575067012, 3836852618898192, 1162802488387840, 4406545705577364, -1732495575067013, 1335, 40, 1467848023080960, 4503531176329215, 4406537115642772, 4503595333451775, 4406545670974356, 1335 },
    { 1725155126853844, 2223098394351508, 1725152702267540, 2223100818937812, -1725155126853845, 3232, 18, 847249408, 4503531176329215, 2223098403018708, 4503595333451775, 2223098394630100, 3232 },
    { 1347508837662852, 511526335886421, 212244424622084, 1646790748927189, -1347508837662853, 3464, 36, 238044267413504, 4503531176329215, 1646772226880725, 4503595333451775, 1646789271483605, 3464 },
    { 2717025337614760, 851659707743716, 288159054700960, 3280525990657516, -2717025337614761, 2947, 20, 3090153472, 4503531176329215, 3280480893500908, 4503595333451775, 3280523843173868, 2947 },
    { 1933489795686998, 1644424037234597, 1361298676802052, 2216615156119543, -1933489795686999, 483, 30, 518617300992, 4503531176329215, 2216582406993911, 4503595333451775, 2216612465473527, 483 },
    { 1252864815908163, 710674514793394, 2578087756034, 1960961242945523, -1252864815908164, 770, 14, 12615680, 4503531176329215, 1960956679542771, 4503595333451775, 1960960970315763, 770 },
    { 2207375568958267, 4268829452162948, 1972627141317376, 4503577879803839, -2207375568958268, 755, 23, 6333399040, 4503531176329215, 4503575195449279, 4503595333451775, 4503575184963519, 755 }
}

describe('Bit52 tests', function()

    it('BOr64', function()
        for _, v in ipairs(sample_data) do
            local a = v[1]
            local b = v[2]
            local c = bit52.bor(a, b)
            assert.are.equal(v[4], c)
        end
    end )

    it('BAnd64', function()
        for _, v in ipairs(sample_data) do
            local a = v[1]
            local b = v[2]
            local c = bit52.band(a, b)
            assert.are.equal(v[3], c)
        end
    end )

    it('BNot64', function()
        for _, v in ipairs(sample_data) do
            local a = v[1]
            local c = bit52.bnot(a)
            assert.are.equal(v[5], c)
        end
    end )

    it('BSet64', function()
        for _, v in ipairs(sample_data) do
            local a = v[1]
            local mask1 = v[9]
            local mask2 = v[11]
            local b = v[2]
            local c = bit52.set(a, mask1, b)
            assert.are.equal(v[10], c)
            c = bit52.set(a, mask2, b)
            assert.are.equal(v[12], c)
        end
    end )

    it('BLShift64', function()
        for _, v in ipairs(sample_data) do
            local i = v[6]
            local s = v[7]
            local c = bit52.lshift(i, s)
            assert.are.equal(v[8], c)
        end
    end)

    it('BRShift64', function()
        for _, v in ipairs(sample_data) do
            local i = v[6]
            local s = v[7]
            local c = bit52.lshift(i, s)
            c = bit52.rshift(c, s)
            assert.are.equal(v[13], c)
        end
    end)

end )